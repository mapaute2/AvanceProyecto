[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\0zzda\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\0zzda\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.7 (Oracle Corporation Java 17)
[debug]       Load.loadUnit: plugins took 259.6586ms
[debug]       Load.loadUnit: defsScala took 0.3764ms
[debug] [Loading] Scanning directory C:\Users\0zzda\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\0zzda\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 34.2342 ms
[debug]           Load.resolveProject(global-plugins) took 78.2202ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\0zzda\.sbt\1.0\plugins, plugins: List(<none>))) took 152.4907ms
[debug] [Loading] Done in C:\Users\0zzda\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 193.7585ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3265ms
[debug]     Load.loadUnit(file:/C:/Users/0zzda/.sbt/1.0/plugins/, ...) took 467.5683ms
[debug]   Load.apply: load took 934.182ms
[debug]   Load.apply: resolveProjects took 10.8592ms
[debug]   Load.apply: finalTransforms took 101.9603ms
[debug]   Load.apply: config.delegates took 11.2148ms
[debug]   Load.apply: Def.make(settings)... took 1075.3028ms
[debug]   Load.apply: structureIndex took 281.0479ms
[debug]   Load.apply: mkStreams took 4.84ms
[info] loading global plugins from C:\Users\0zzda\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 13919.5546ms
[debug]           Load.loadUnit: plugins took 52.1222ms
[debug]           Load.loadUnit: defsScala took 0.0092ms
[debug] [Loading] Scanning directory C:\Users\0zzda\IdeaProjects\PROG_1\project
[debug]             Load.loadUnit: mkEval took 13.1424ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\0zzda\IdeaProjects\PROG_1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.4552 ms
[info] loading settings for project prog_1-build from idea.sbt ...
[debug]               Load.resolveProject(prog_1-build) took 33.5679ms
[debug]             Load.loadTransitive: finalizeProject(Project(id prog_1-build, base: C:\Users\0zzda\IdeaProjects\PROG_1\project, plugins: List(<none>))) took 40.8644ms
[debug] [Loading] Done in C:\Users\0zzda\IdeaProjects\PROG_1\project, returning: (prog_1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 8303.481ms
[debug]           Load.loadUnit: cleanEvalClasses took 11.2503ms
[debug]         Load.loadUnit(file:/C:/Users/0zzda/IdeaProjects/PROG_1/project/, ...) took 8368.4548ms
[debug]       Load.apply: load took 8371.6285ms
[debug]       Load.apply: resolveProjects took 0.2037ms
[debug]       Load.apply: finalTransforms took 31.7987ms
[debug]       Load.apply: config.delegates took 1.2641ms
[debug]       Load.apply: Def.make(settings)... took 240.9363ms
[debug]       Load.apply: structureIndex took 68.7961ms
[debug]       Load.apply: mkStreams took 0.0032ms
[info] loading project definition from C:\Users\0zzda\IdeaProjects\PROG_1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 13849.265ms
[debug]     Load.loadUnit: defsScala took 0.0173ms
[debug] [Loading] Scanning directory C:\Users\0zzda\IdeaProjects\PROG_1
[debug]       Load.loadUnit: mkEval took 0.3607ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\0zzda\IdeaProjects\PROG_1, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.0115 ms
[info] loading settings for project prog_1 from build.sbt ...
[debug]         Load.resolveProject(prog_1) took 73.4802ms
[debug]       Load.loadTransitive: finalizeProject(Project(id prog_1, base: C:\Users\0zzda\IdeaProjects\PROG_1, plugins: List(<none>))) took 79.9664ms
[debug] [Loading] Done in C:\Users\0zzda\IdeaProjects\PROG_1, returning: (prog_1)
[debug]     Load.loadUnit: loadedProjectsRaw took 2656.5374ms
[debug]     Load.loadUnit: cleanEvalClasses took 38.2437ms
[debug]   Load.loadUnit(file:/C:/Users/0zzda/IdeaProjects/PROG_1/, ...) took 16546.0826ms
[debug] Load.apply: load took 16549.3204ms
[debug] Load.apply: resolveProjects took 0.1566ms
[debug] Load.apply: finalTransforms took 45.6285ms
[debug] Load.apply: config.delegates took 0.549ms
[debug] Load.apply: Def.make(settings)... took 116.2022ms
[debug] Load.apply: structureIndex took 39.7638ms
[debug] Load.apply: mkStreams took 0.0027ms
[info] set current project to PROG_1 (in build file:/C:/Users/0zzda/IdeaProjects/PROG_1/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62389 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62389, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to PROG_1 (in build file:/C:/Users/0zzda/IdeaProjects/PROG_1/)
[debug] > Exec(idea-shell, None, None)
